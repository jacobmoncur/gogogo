// Generated by CoffeeScript 1.3.3
(function() {
  var Layer, Server, Service, async, curry,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Service = require("./Service");

  Server = require("./Server");

  async = require("async");

  curry = require("fjs").curry;

  Layer = (function() {

    function Layer(name, layer, repoName, mainConfig) {
      var server, serverConfig, _i, _len, _ref;
      this.name = name;
      this.repoName = repoName;
      this.serviceAction = __bind(this.serviceAction, this);

      layer = this.normalizeConfig(layer);
      if (layer.hosts.length > 1) {
        this.groupDeploy = true;
      }
      console.log("WORKING WITH " + layer.hosts.length + " SERVERS: " + (layer.hosts.join(',')));
      this.services = [];
      _ref = layers.hosts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        server = _ref[_i];
        serverConfig = new Server(this.name, server, layer, mainConfig);
        this.services.push(new Service(this.name, serverConfig, this.repoName, this));
      }
    }

    Layer.prototype.deployOne = curry(function(branch, service, cb) {
      return service.deploy(branch, cb);
    });

    Layer.prototype.deploy = function(branch, cb) {
      var withBranch;
      withBranch = this.deployOne(branch);
      return async.forEach(this.services, withBranch, cb);
    };

    Layer.prototype.logOne = curry(function(lines, service, cb) {
      return service.serverLogs(lines, cb);
    });

    Layer.prototype.serverLogs = function(lines, cb) {
      var withLines;
      withLines = this.logOne(lines);
      return async.forEach(this.services, withLines, cb);
    };

    Layer.prototype.restart = function(cb) {
      return this.serviceAction("restart", cb);
    };

    Layer.prototype.start = function(cb) {
      return this.serviceAction("start", cb);
    };

    Layer.prototype.stop = function(cb) {
      return this.serviceAction("stop", cb);
    };

    Layer.prototype.serviceAction = function(action, cb) {
      var actionCurry;
      actionCurry = this.actionOne(action);
      return async.forEach(this.services, actionCurry, cb);
    };

    Layer.prototype.actionOne = curry(function(action, service, cb) {
      return service[action](cb);
    });

    Layer.prototype.log = function(parentAddress, msg) {
      if (this.groupDeploy) {
        return console.log("" + parentAddress + ": " + msg);
      } else {
        return console.log(msg);
      }
    };

    return Layer;

  })();

  module.exports = Layer;

}).call(this);
