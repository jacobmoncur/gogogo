// Generated by CoffeeScript 1.3.3
(function() {
  var HostGroup, Service, async, curry,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Service = require("./Service");

  async = require("async");

  curry = require("fjs").curry;

  HostGroup = (function() {

    function HostGroup(name, servers, mainConfig, repoName) {
      var server, _i, _len;
      this.name = name;
      this.servers = servers;
      this.mainConfig = mainConfig;
      this.repoName = repoName;
      this.serviceAction = __bind(this.serviceAction, this);

      console.log("WORKING WITH " + this.servers.length + " SERVERS " + (this.servers.join(',')));
      this.services = [];
      for (_i = 0, _len = servers.length; _i < _len; _i++) {
        server = servers[_i];
        this.services.push(new Service(this.name, server, this.mainConfig, this.repoName, true));
      }
    }

    HostGroup.prototype.deployOne = curry(function(branch, service, cb) {
      return service.deploy(branch, cb);
    });

    HostGroup.prototype.deploy = function(branch, cb) {
      var withBranch;
      withBranch = this.deployOne(branch);
      return async.forEach(this.services, withBranch, cb);
    };

    HostGroup.prototype.logOne = curry(function(lines, service, cb) {
      return service.serverLogs(lines, cb);
    });

    HostGroup.prototype.serverLogs = function(lines, cb) {
      var withLines;
      withLines = this.logOne(lines);
      return async.forEach(this.services, withLines, cb);
    };

    HostGroup.prototype.restart = function(cb) {
      return this.serviceAction("restart", cb);
    };

    HostGroup.prototype.start = function(cb) {
      return this.serviceAction("start", cb);
    };

    HostGroup.prototype.stop = function(cb) {
      return this.serviceAction("stop", cb);
    };

    HostGroup.prototype.serviceAction = function(action, cb) {
      var actionCurry;
      actionCurry = this.actionOne(action);
      return async.forEach(this.services, actionCurry, cb);
    };

    HostGroup.prototype.actionOne = curry(function(action, service, cb) {
      return service[action](cb);
    });

    return HostGroup;

  })();

  module.exports = HostGroup;

}).call(this);
