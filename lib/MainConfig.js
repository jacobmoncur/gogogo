// Generated by CoffeeScript 1.3.3
(function() {
  var MainConfig, path, readConfig;

  path = require("path");

  readConfig = function(f, cb) {
    var m;
    try {
      m = require(f);
      return cb(null, m);
    } catch (e) {
      console.log("BAD", e);
      throw e;
      return cb(e);
    }
  };

  MainConfig = (function() {

    function MainConfig(_arg) {
      var name, server, servers;
      this.start = _arg.start, this.install = _arg.install, this.cron = _arg.cron, servers = _arg.servers;
      this.servers = [];
      for (name in servers) {
        server = servers[name];
        this.servers[name] = Array.isArray(server) ? server : [server];
      }
    }

    MainConfig.prototype.getServerByName = function(name) {
      return this.servers[name] || (function() {
        throw new Error("Cannot find server named " + name + ". Check your config file");
      })();
    };

    MainConfig.prototype.getStart = function() {
      return this.start || (function() {
        throw new Error("You must specify 'start:' in your config file");
      })();
    };

    MainConfig.prototype.getInstall = function() {
      return this.install || (function() {
        throw new Error("You must specify 'install:' in your config file");
      })();
    };

    MainConfig.prototype.getServerNames = function() {
      return Object.keys(this.servers);
    };

    MainConfig.prototype.getCronConfig = function() {
      var matches;
      if (!(this.cron != null)) {
        return false;
      }
      matches = this.cron.match(/([0-9\s\*]+)\s+(.*)/);
      if (!(matches != null)) {
        throw new Error("Invalid Cron: " + this.cron);
      }
      return {
        time: matches[1],
        command: matches[2]
      };
    };

    return MainConfig;

  })();

  MainConfig.loadFromFile = function(file, cb) {
    return readConfig(file, function(err, config) {
      if (err != null) {
        return cb(err);
      }
      return cb(null, new MainConfig(config));
    });
  };

  module.exports = MainConfig;

}).call(this);
