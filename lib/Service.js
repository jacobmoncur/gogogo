// Generated by CoffeeScript 1.3.3
(function() {
  var Cron, PREFIX, Service, spawn,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  spawn = require('child_process').spawn;

  Cron = require("./Cron");

  PREFIX = "ggg";

  Service = (function() {

    Service.prototype.log = function(msg) {
      return this.parent.log(this.serverAddress, msg);
    };

    Service.prototype.sshCommand = function(commands, cb) {
      return this.localCommand('ssh', [this.server, commands], function(err) {
        if (err != null) {
          return cb(new Error("SSH Command Failed"));
        }
        return cb();
      });
    };

    Service.prototype.localCommand = function(command, args, cb) {
      var process,
        _this = this;
      process = spawn(command, args);
      process.stdout.on('data', function(data) {
        return _this.log(data.toString().replace(/\n$/, ""));
      });
      process.stderr.on('data', function(data) {
        return _this.log(data.toString().replace(/\n$/, ""));
      });
      process.on('exit', function(code) {
        if (code) {
          return cb(new Error("Command Failed"));
        }
        return cb();
      });
      return process;
    };

    function Service(name, repoName, config, parent) {
      this.name = name;
      this.repoName = repoName;
      this.config = config;
      this.parent = parent;
      this.sshCommand = __bind(this.sshCommand, this);

      this.id = this.repoName + "_" + this.name;
      this.repoDir = "$HOME/" + PREFIX + "/" + this.id;
      this.host = this.config.getHost();
      this.serverUser = this.config.getUser();
      this.repoUrl = "ssh://" + this.host + "/~/" + PREFIX + "/" + this.id;
      this.hookFile = "" + this.repoDir + "/.git/hooks/post-receive";
      this.logFile = "" + this.repoDir + "/log.txt";
      this.upstartFile = "/etc/init/" + this.id + ".conf";
    }

    Service.prototype.create = function(cb) {
      var createRemoteScript, cron, cronConfig, hookScript, upstartScript;
      this.log(" - id: " + this.id);
      this.log(" - repo: " + this.repoDir);
      this.log(" - remote: " + this.repoUrl);
      this.log(" - start: " + (this.config.getStart()));
      this.log(" - install: " + (this.config.getInstall()));
      upstartScript = this.makeUpstartScript();
      hookScript = this.makeHookScript();
      cronConfig = this.config.getCron();
      if (cronConfig) {
        cron = new Cron(cronConfig, this.id, this.serverUser);
      }
      createRemoteScript = this.makeCreateScript(upstartScript, hookScript, cron.buildCron());
      return this.sshCommand(createRemoteScript, function(err) {
        if (err != null) {
          return cb(err);
        }
        return cb();
      });
    };

    Service.prototype.makeUpstartScript = function() {
      return "description '" + this.id + "'\nstart on startup\nrespawn\nrespawn limit 5 5 \nexec su " + this.serverUser + " -c 'cd " + this.repoDir + " && " + (this.config.getStart()) + "' >> " + this.logFile + " 2>&1";
    };

    Service.prototype.makeHookScript = function() {
      return "read oldrev newrev refname\necho 'GOGOGO checking out:'\necho \\$newrev\ncd " + this.repoDir + "/.git\nGIT_WORK_TREE=" + this.repoDir + " git reset --hard \\$newrev || exit 1;";
    };

    Service.prototype.makeCreateScript = function(upstart, hook, cronInstallScript) {
      return "echo '\nCREATING...'\nmkdir -p " + this.repoDir + "\ncd " + this.repoDir + "\necho \"Locating git\"\nwhich git \nif (( $? )); then\n    echo \"Could not locate git\"\n    exit 1\nfi\ngit init\ngit config receive.denyCurrentBranch ignore\n\necho \"" + upstart + "\" > " + this.upstartFile + "\n\necho \"" + hook + "\" > " + this.hookFile + "\nchmod +x " + this.hookFile + "\necho \"[√] created\"\n" + cronInstallScript;
    };

    Service.prototype.deploy = function(branch, cb) {
      var _this = this;
      this.log(" - name: " + this.name);
      this.log(" - server: " + this.server);
      this.log(" - branch: " + branch);
      return this.create(function(err) {
        if (err != null) {
          return cb(err);
        }
        _this.log("\nPUSHING");
        return _this.localCommand("git", ["push", _this.repoUrl, branch, "-f"], function(err) {
          var installCommand;
          if (err != null) {
            return cb(err);
          }
          _this.log("[√] pushed");
          installCommand = _this.makeInstallCommand() + "\n" + _this.makeRestartCommand();
          return _this.sshCommand(installCommand, function(err) {
            var command, kill;
            if (err != null) {
              return cb(err);
            }
            command = _this.serverLogs(10, function() {});
            kill = function() {
              command.kill();
              return cb();
            };
            return setTimeout(kill, 2000);
          });
        });
      });
    };

    Service.prototype.makeInstallCommand = function() {
      return "echo '\nINSTALLING'\ncd " + this.repoDir + "\n" + (this.config.getInstall()) + " || exit 1;\necho '[√] installed'";
    };

    Service.prototype.makeRestartCommand = function() {
      return "echo '\nRESTARTING'\nstop " + this.id + "\nstart " + this.id + "\necho '[√] restarted'";
    };

    Service.prototype.restart = function(cb) {
      this.log("RESTARTING");
      return this.sshCommand(this.makeRestartCommand(), cb);
    };

    Service.prototype.stop = function(cb) {
      this.log("STOPPING");
      return this.sshCommand("stop " + this.id + ";", cb);
    };

    Service.prototype.start = function(cb) {
      this.log("STARTING");
      return this.sshCommand("start " + this.id + ";", cb);
    };

    Service.prototype.serverLogs = function(lines, cb) {
      this.log("Tailing " + this.logFile + "... Control-C to exit");
      this.log("-------------------------------------------------------------");
      return this.sshCommand("tail -n " + lines + " -f " + this.logFile, cb);
    };

    return Service;

  })();

  module.exports = Service;

}).call(this);
