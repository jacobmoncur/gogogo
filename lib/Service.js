// Generated by CoffeeScript 1.3.3
(function() {
  var PREFIX, Service, local, spawn, ssh;

  spawn = require('child_process').spawn;

  PREFIX = "ggg";

  ssh = function(server, commands, cb) {
    return local('ssh', [server, commands], function(err) {
      if (err != null) {
        return cb(new Error("SSH Command Failed"));
      }
      return cb();
    });
  };

  local = function(command, args, cb) {
    var process;
    process = spawn(command, args);
    process.stdout.on('data', function(data) {
      return console.log(data.toString().replace(/\n$/, ""));
    });
    process.stderr.on('data', function(data) {
      return console.log(data.toString().replace(/\n$/, ""));
    });
    process.on('exit', function(code) {
      if (code) {
        return cb(new Error("Command Failed"));
      }
      return cb();
    });
    return process;
  };

  Service = (function() {

    function Service(name, server, mainConfig, repoName) {
      this.name = name;
      this.server = server;
      this.mainConfig = mainConfig;
      this.repoName = repoName;
      this.id = this.repoName + "_" + this.name;
      this.repoDir = "$HOME/" + PREFIX + "/" + this.id;
      this.repoUrl = "ssh://" + this.server + "/~/" + PREFIX + "/" + this.id;
      this.hookFile = "" + this.repoDir + "/.git/hooks/post-receive";
      this.logFile = "" + this.repoDir + "/log.txt";
      this.upstartFile = "/etc/init/" + this.id + ".conf";
      this.cronFile = "/etc/cron.d/" + this.id;
      this.cronLogFiles = "cron.txt";
      this.serverUser = this.server.replace(/@.*$/, "");
    }

    Service.prototype.create = function(cb) {
      var createRemoteScript, cron, cronInstallScript, cronScript, hookScript, upstartScript;
      console.log(" - id: " + this.id);
      console.log(" - repo: " + this.repoDir);
      console.log(" - remote: " + this.repoUrl);
      console.log(" - start: " + (this.mainConfig.getStart()));
      console.log(" - install: " + (this.mainConfig.getInstall()));
      upstartScript = this.makeUpstartScript();
      hookScript = this.makeHookScript();
      cronInstallScript = "";
      cron = this.mainConfig.getCronConfig();
      if (cron) {
        cronScript = this.makeCronScript(cron);
        cronInstallScript = this.makeCronInstallScript(cronScript);
      }
      createRemoteScript = this.makeCreateScript(upstartScript, hookScript, cronInstallScript);
      return ssh(this.server, createRemoteScript, function(err) {
        if (err != null) {
          return cb(err);
        }
        return cb();
      });
    };

    Service.prototype.makeUpstartScript = function() {
      return "description '" + this.id + "'\nstart on startup\nchdir " + this.repoDir + "\nrespawn\nrespawn limit 5 5 \nexec su " + this.serverUser + " -c '" + (this.mainConfig.getStart()) + "' >> " + this.logFile + " 2>&1";
    };

    Service.prototype.makeHookScript = function() {
      return "read oldrev newrev refname\necho 'GOGOGO checking out:'\necho \\$newrev\ncd " + this.repoDir + "/.git\nGIT_WORK_TREE=" + this.repoDir + " git reset --hard \\$newrev || exit 1;";
    };

    Service.prototype.makeCronScript = function(cron) {
      return "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n" + cron.time + " " + this.serverUser + " cd " + this.repoDir + " && " + cron.command + " >> " + this.cronLogFile + " 2>&1";
    };

    Service.prototype.makeCronInstallScript = function(cronScript) {
      return "echo \"" + cronScript + "\" > " + this.cronFile + "\nchmod 0644 " + this.cronFile;
    };

    Service.prototype.makeCreateScript = function(upstart, hook, cronInstallScript) {
      return "echo '\nCREATING...'\nmkdir -p " + this.repoDir + "\ncd " + this.repoDir + "\necho \"Locating git\"\nwhich git \nif (( $? )); then\n    echo \"Could not locate git\"\n    exit 1\nfi\ngit init\ngit config receive.denyCurrentBranch ignore\n\necho \"" + upstart + "\" > " + this.upstartFile + "\n\necho \"" + hook + "\" > " + this.hookFile + "\nchmod +x " + this.hookFile + "\necho \"[√] created\"\n" + cronInstallScript;
    };

    Service.prototype.deploy = function(branch, cb) {
      var _this = this;
      console.log(" - name: " + this.name);
      console.log(" - server: " + this.server);
      console.log(" - branch: " + branch);
      return this.create(function(err) {
        if (err != null) {
          return cb(err);
        }
        console.log("\nPUSHING");
        return local("git", ["push", _this.repoUrl, branch, "-f"], function(err) {
          var installCommand;
          if (err != null) {
            return cb(err);
          }
          console.log("[√] pushed");
          installCommand = _this.makeInstallCommand() + "\n" + _this.makeRestartCommand();
          return ssh(_this.server, installCommand, function(err) {
            var command, kill;
            if (err != null) {
              return cb(err);
            }
            console.log();
            command = _this.logs(10, function() {});
            kill = function() {
              command.kill();
              return cb();
            };
            return setTimeout(kill, 2000);
          });
        });
      });
    };

    Service.prototype.makeInstallCommand = function() {
      return "echo '\nINSTALLING'\ncd " + this.repoDir + "\n" + (this.mainConfig.getInstall()) + " || exit 1;\necho '[√] installed'";
    };

    Service.prototype.makeRestartCommand = function() {
      return "echo '\nRESTARTING'\nstop " + this.id + "\nstart " + this.id + "\necho '[√] restarted'";
    };

    Service.prototype.restart = function(cb) {
      console.log("RESTARTING");
      return ssh(this.server, this.makeRestartCommand(), cb);
    };

    Service.prototype.stop = function(cb) {
      console.log("STOPPING");
      return ssh(this.server, "stop " + this.id + ";", cb);
    };

    Service.prototype.start = function(cb) {
      console.log("STARTING");
      return ssh(this.server, "start " + this.id + ";", cb);
    };

    Service.prototype.logs = function(lines, cb) {
      console.log("Tailing " + this.logFile + "... Control-C to exit");
      console.log("-------------------------------------------------------------");
      return ssh(this.server, "tail -n " + lines + " -f " + this.logFile, cb);
    };

    return Service;

  })();

  module.exports = Service;

}).call(this);
