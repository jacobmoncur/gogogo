#!/usr/bin/env node
// Generated by CoffeeScript 1.3.1

/*
CLI to automatically deploy stuff, kind of like heroku. 
Ubuntu only! (upstart)

TODO remember last command again
TODO multiple services
TODO multiple cron
TODO multiple servers
*/


(function() {
  var APP, CONFIG, LOGS_LINES, MainConfig, PREFIX, addGitRemote, configCron, configInstall, configServer, configServerNames, configStart, create, cronFile, cronLogFile, deploy, exec, finish, fs, getConfig, getConfigServer, help, hookFile, init, installCommand, list, local, logFile, logs, mainConfigPath, parentDir, path, pckg, program, readConfig, readMainConfig, repoDir, repoUrl, reponame, restart, restartCommand, serverUser, serviceId, spawn, ssh, start, stop, upstartFile, version, writeConfig, _ref;

  APP = "gogogo";

  PREFIX = "ggg";

  CONFIG = "ggg";

  LOGS_LINES = 40;

  _ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

  fs = require('fs');

  path = require('path');

  program = require('commander');

  getConfig = function(cb) {
    return reponame(process.cwd(), function(err, repoName) {
      if (err != null) {
        return cb(err);
      }
      return readMainConfig(function(err, mainConfig) {
        if (err) {
          return cb(new Error("Bad gogogo config file, ggg.js. Run 'gogogo init' to create one. Err=" + err.message));
        }
        return cb(null, repoName, mainConfig);
      });
    });
  };

  getConfigServer = function(cb) {
    return getConfig(function(err, repoName, config) {
      var server;
      if (err != null) {
        return cb(err);
      }
      server = configServer(mainConfig, name);
      if (!server) {
        return cb(new Error("Invalid Server Name: " + name));
      }
      return cb(null, repoName, config, server);
    });
  };

  finish = function(err) {
    if (err != null) {
      console.log("!!! " + err.message);
      process.exit(1);
    }
    return console.log("OK");
  };

  program.version("0.3.1");

  program.command("init").description("creates a ggg.js config file for you").action(function() {
    return init(finish);
  });

  program.command("deploy <name> [branch]").description("deploys a branch (defaults to origin/master) to named server").action(function(name, branch) {
    return getConfigServer(function(err, repoName, mainConfig, server) {
      if (err != null) {
        return finish(err);
      }
      branch = branch || "origin/master";
      return deploy(name, branch, mainConfig, repoName, finish);
    });
  });

  program.command("restart <name>").description("restarts named server").action(function(name) {
    return getConfigServer(function(err, repoName, mainConfig, server) {
      if (err != null) {
        return finish(err);
      }
      return restart(name, server, repoName, finish);
    });
  });

  program.command("start <name>").description("starts named server").action(function(name) {
    return getConfigServer(function(err, repoName, mainConfig, server) {
      if (err != null) {
        return finish(err);
      }
      return start(name, server, repoName, finish);
    });
  });

  program.command("stop <name>").description("stops named server").action(function(name) {
    return getConfigServer(function(err, repoName, mainConfig, server) {
      if (err != null) {
        return finish(err);
      }
      return stop(name, server, repoName, finish);
    });
  });

  program.command("logs <name>").description("Logs " + LOGS_LINES + " lines of named servers log files").action(function(name) {
    return getConfigServer(function(err, repoName, mainConfig, server) {
      if (err != null) {
        return finish(err);
      }
      return logs(name, server, repoName, LOGS_LINES, finish);
    });
  });

  program.command("list").description("lists all the servers").action(function() {
    return getConfig(function(err, repoName, mainConfig) {
      if (err != null) {
        return finish(err);
      }
      return list(mainConfig, finish);
    });
  });

  program.command("*").action(function() {
    return finish(new Error("bad command!"));
  });

  init = function(cb) {
    var initConfigContent;
    initConfigContent = "// example ggg.js. Delete what you don't need\nmodule.exports = {\n\n  // services\n  start: \"node app.js\",\n\n  // install\n  install: \"npm install\",\n\n  // cron jobs (from your app folder)\n  cron: \"0 3 * * * node sometask.js\",\n\n  // servers to deploy to\n  servers: {\n    dev: \"deploy@dev.mycompany.com\",\n    staging: \"deploy@staging.mycompany.com\"\n  }\n}";
    console.log("GOGOGO INITIALIZING!");
    console.log("*** Written to ggg.js ***");
    console.log(initConfigContent);
    return fs.writeFile(mainConfigPath() + ".js", initConfigContent, 0x1ed, cb);
  };

  serviceId = function(repoName, name) {
    return repoName + "_" + name;
  };

  hookFile = function(id) {
    return "" + (repoDir(id)) + "/.git/hooks/post-receive";
  };

  logFile = function(id) {
    return path.join(repoDir(id), "log.txt");
  };

  parentDir = function() {
    return "$HOME/" + PREFIX;
  };

  upstartFile = function(id) {
    return "/etc/init/" + id + ".conf";
  };

  repoDir = function(id) {
    return "" + (parentDir()) + "/" + id;
  };

  repoUrl = function(id, server) {
    return "ssh://" + server + "/~/" + PREFIX + "/" + id;
  };

  serverUser = function(server) {
    return server.replace(/@.*$/, "");
  };

  cronFile = function(id) {
    return "/etc/cron.d/" + id;
  };

  cronLogFile = function(id) {
    return "cron.txt";
  };

  create = function(name, server, mainConfig, repoName, cb) {
    var createRemoteScript, cron, cronRemoteScript, cronScript, hook, id, service;
    id = serviceId(repoName, name);
    console.log(" - id: " + id);
    console.log(" - repo: " + (repoDir(id)));
    console.log(" - remote: " + (repoUrl(id, server)));
    console.log(" - start: " + (configStart(mainConfig)));
    console.log(" - install: " + (configInstall(mainConfig)));
    service = "description '" + id + "'\nstart on startup\nchdir " + (repoDir(id)) + "\nrespawn\nrespawn limit 5 5 \nexec su " + (serverUser(server)) + " -c '" + (configStart(mainConfig)) + "' >> " + (logFile(id)) + " 2>&1";
    cronRemoteScript = "";
    cron = configCron(mainConfig);
    if (cron) {
      cronScript = "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n" + cron.time + " " + (serverUser(server)) + " cd " + (repoDir(id)) + " && " + cron.command + " >> " + (cronLogFile(id)) + " 2>&1";
      cronRemoteScript += "echo \"" + cronScript + "\" > " + (cronFile(id)) + "\nchmod 0644 " + (cronFile(id));
    }
    hook = "read oldrev newrev refname\necho 'GOGOGO checking out:'\necho \\$newrev\ncd " + (repoDir(id)) + "/.git\nGIT_WORK_TREE=" + (repoDir(id)) + " git reset --hard \\$newrev || exit 1;";
    createRemoteScript = "echo '\nCREATING...'\nmkdir -p " + (repoDir(id)) + "\ncd " + (repoDir(id)) + "\necho \"Locating git\"\nwhich git \nif (( $? )); then\n    echo \"Could not locate git\"\n    exit 1\nfi\ngit init\ngit config receive.denyCurrentBranch ignore\n\necho \"" + service + "\" > " + (upstartFile(id)) + "\n\necho \"" + hook + "\" > " + (hookFile(id)) + "\nchmod +x " + (hookFile(id)) + "\necho \"[√] created\"\n" + cronRemoteScript;
    return ssh(server, createRemoteScript, function(err) {
      if (err != null) {
        return cb(err);
      }
      return cb();
    });
  };

  deploy = function(name, branch, mainConfig, repoName, cb) {
    var server;
    server = configServer(mainConfig, name);
    console.log(" - name: " + name);
    console.log(" - server: " + server);
    console.log(" - branch: " + branch);
    return create(name, server, mainConfig, repoName, function(err) {
      var id;
      if (err != null) {
        return cb(err);
      }
      id = serviceId(repoName, name);
      console.log("\nPUSHING");
      return local("git", ["push", repoUrl(id, server), branch, "-f"], function(err) {
        var command;
        if (err != null) {
          return cb(err);
        }
        console.log("[√] pushed");
        command = installCommand(id, mainConfig) + "\n" + restartCommand(id);
        return ssh(server, command, function(err) {
          var kill;
          if (err != null) {
            return cb(err);
          }
          console.log("");
          command = logs(name, server, repoName, 1, cb);
          kill = function() {
            return command.kill();
          };
          return setTimeout(kill, 2000);
        });
      });
    });
  };

  installCommand = function(id, mainConfig) {
    return "echo '\nINSTALLING'\ncd " + (repoDir(id)) + "\n" + (configInstall(mainConfig)) + " || exit 1;\necho '[√] installed'";
  };

  restartCommand = function(id) {
    return "echo '\nRESTARTING'\nstop " + id + "\nstart " + id + "\necho '[√] restarted'";
  };

  restart = function(name, server, repoName, cb) {
    var id;
    id = serviceId(repoName, name);
    return ssh(server, restartCommand(id), cb);
  };

  stop = function(name, server, repoName, cb) {
    var id;
    console.log("STOPPING");
    id = serviceId(repoName, name);
    return ssh(server, "stop " + id + ";", cb);
  };

  start = function(name, server, repoName, cb) {
    var id;
    console.log("STARTING");
    id = serviceId(repoName, name);
    return ssh(server, "start " + id + ";", cb);
  };

  version = function(cb) {
    return pckg(function(err, info) {
      return console.log("GOGOGO v" + info.version);
    });
  };

  help = function(cb) {
    console.log("--------------------------");
    console.log("gogogo help");
    console.log("gogogo init - creates a ggg.js config file for you");
    console.log("gogogo deploy <name> <branch> — deploys branch to named server");
    console.log("gogogo restart <name>");
    console.log("gogogo start <name>");
    console.log("gogogo stop <name>");
    console.log("gogogo logs <name> — tail remote log");
    console.log("gogogo list — show available names");
    return cb();
  };

  logs = function(name, server, repoName, lines, cb) {
    var id, log;
    id = serviceId(repoName, name);
    log = logFile(id);
    console.log("Tailing " + log + "... Control-C to exit");
    console.log("-------------------------------------------------------------");
    return ssh(server, "tail -n " + lines + " -f " + log, function() {});
  };

  list = function(mainConfig, cb) {
    console.log("GOGOGO servers (see ggg.js)");
    return console.log(" - " + configServerNames(mainConfig).join("\n - "));
  };

  pckg = function(cb) {
    return fs.readFile(path.join(__dirname, "package.json"), function(err, data) {
      if (err != null) {
        return cb(err);
      }
      return cb(null, JSON.parse(data));
    });
  };

  reponame = function(dir, cb) {
    return exec("git config --get remote.origin.url", {
      cwd: dir
    }, function(err, stdout, stderr) {
      var url;
      if (err != null) {
        return cb(null, path.basename(dir));
      } else {
        url = stdout.replace("\n", "");
        return cb(null, path.basename(url).replace(".git", ""));
      }
    });
  };

  writeConfig = function(f, obj, cb) {
    return fs.mkdir(path.dirname(f), function(err) {
      return fs.writeFile(f, "module.exports = " + JSON.stringify(obj), 0x1fd, cb);
    });
  };

  readConfig = function(f, cb) {
    var m;
    try {
      m = require(f);
      return cb(null, m);
    } catch (e) {
      console.log("BAD", e);
      throw e;
      return cb(e);
    }
  };

  MainConfig = (function() {

    MainConfig.name = 'MainConfig';

    function MainConfig(_arg) {
      this.start = _arg.start, this.install = _arg.install, this.cron = _arg.cron, this.servers = _arg.servers;
      if (this.servers == null) {
        this.servers = {};
      }
    }

    return MainConfig;

  })();

  configCron = function(cfg) {
    var matches;
    if (!(cfg.cron != null)) {
      return;
    }
    matches = cfg.cron.match(/([0-9\s\*]+)\s+(.*)/);
    if (!(matches != null)) {
      throw new Error("Invalid Cron: " + cfg.cron);
    }
    return {
      time: matches[1],
      command: matches[2]
    };
  };

  configServer = function(cfg, name) {
    return cfg.servers[name] || (function() {
      throw new Error("Cannot find server named " + name + ". Check your config file");
    })();
  };

  configStart = function(cfg) {
    return cfg.start || (function() {
      throw new Error("You must specify 'start:' in your config file");
    })();
  };

  configInstall = function(cfg) {
    return cfg.install || (function() {
      throw new Error("You must specify 'install:' in your config file");
    })();
  };

  configServerNames = function(cfg) {
    return Object.keys(cfg.servers);
  };

  mainConfigPath = function() {
    return path.join(process.cwd(), CONFIG);
  };

  readMainConfig = function(cb) {
    return readConfig(mainConfigPath(), function(err, config) {
      if (err != null) {
        return cb(err);
      }
      return cb(null, new MainConfig(config));
    });
  };

  addGitRemote = function(name, url, cb) {
    return exec("git remote rm " + name, function(err, stdout, stderr) {
      return exec("git remote add " + name + " " + url, function(err, stdout, stderr) {
        if (err != null) {
          return cb(err);
        }
        return cb();
      });
    });
  };

  ssh = function(server, commands, cb) {
    return local('ssh', [server, commands], function(err) {
      if (err != null) {
        return cb(new Error("SSH Command Failed"));
      }
      return cb();
    });
  };

  local = function(command, args, cb) {
    var process;
    process = spawn(command, args);
    process.stdout.on('data', function(data) {
      return console.log(data.toString().replace(/\n$/, ""));
    });
    process.stderr.on('data', function(data) {
      return console.log(data.toString().replace(/\n$/, ""));
    });
    process.on('exit', function(code) {
      if (code) {
        return cb(new Error("Command Failed"));
      }
      return cb();
    });
    return process;
  };

  program.parse(process.argv);

}).call(this);
